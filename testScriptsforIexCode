import ast
import datetime
import os
import numpy as np
from os.path import join
from datetime import date


class testCal:
    def __init__(self):
        self.mono_max = [1800, 2100, 2500, 3000, 3500]
        self.id_sp_eV = [500, 520, 540, 560, 580]
        self.grt_name = ["MEG"]
        self.id_mode = [0]
        self.fit_coefs = [1.0, 2.0]

    def write(self, new_entry, **kwargs):
        """
        Appends/Writes a new calibration to the calibration file.
        Args: 
            new_entry (dict)
        kwargs: 
            filename (str)
            path (str)
            comment (str)
            debug (bool)
        """
        kwargs.setdefault('filename', "Dict_IDCal.txt")
        kwargs.setdefault('path', ".")
        kwargs.setdefault('debug', False)

        filename = kwargs['filename']
        path = kwargs['path']
        debug = kwargs['debug']
        comment = kwargs.get("comment", "")

        fpath = join(path, filename)
        os.makedirs(path, exist_ok=True)

        with open(fpath, "a+") as f:
            f.write("\n======= " + str(date.today()) + ": " + comment + "\n")
            f.write(str(new_entry))
            f.write("\n")

        if debug:
            print('write_calibration fpath:', fpath)
            print('ID calibration:', new_entry)

    def read(self, fpath, **kwargs):
        """
        Reads any dictionary entry from a file.

        Args:
            fpath (str): Path to the file to read from.
            kwargs:
                index (int): -1 to get the last entry, or specific index.
                comment (str): Search by comment string in header.
                date (str): Search by date string in header.
                debug (bool): If True, print debug information.

        Returns:
            dict: The parsed dictionary entry.
        """
        kwargs.setdefault("index", -1)
        kwargs.setdefault("comment", None)
        kwargs.setdefault("date", None)
        kwargs.setdefault("debug", False)

        index = kwargs["index"]
        comment = kwargs["comment"]
        date_search = kwargs["date"]
        debug = kwargs["debug"]

        entries = []

        with open(fpath, 'r') as f:
            content = f.read()

        raw_entries = content.split("=======")

        for raw in raw_entries:
            if not raw.strip():
                continue

            try:
                brace_index = raw.index("{")
                header = raw[:brace_index].strip()
                dict_text = raw[brace_index:]
                last_brace_index = dict_text.rfind("}")
                clean_block = dict_text[:last_brace_index + 1]
                entry_dict = ast.literal_eval(clean_block)
                entries.append((header, entry_dict))
            except Exception as e:
                if debug:
                    print("Malformed entry:", e)
                continue

        # Search by comment or date in the header
        index2 = 0
        while index2 < len(entries):
            header, block = entries[index2]
            if (comment and comment in header) or (date_search and date_search in header):
                index = index2
                break
            index2 += 1

        if index is not None:
            header, entry = entries[index]

            # Convert list-of-pairs to dict if needed
            for grating in entry:
                for mode in entry[grating]:
                    if isinstance(entry[grating][mode], list):
                        entry[grating][mode] = {
                            bkpt: coefs for bkpt, coefs in entry[grating][mode]
                        }

            if debug:
                print(f"\nSelected Entry Header:\n{header}")
                print(f"\nParsed Dictionary:\n{entry}")

            return entry

        raise ValueError("No valid entry matched or found.")


def parse_entry(entry, grating, ID_mode, energy_eV):
    """
    This parse entry only works for dictionaries of the type:
    {"MEG": {0: {bkpt1: [polynomials], bkpt2: [polynomials]}}}

    Parses a calibration dictionary and returns the coefficients corresponding
    to the first breakpoint greater than the specified energy value.

    Args:
        entry (dict): Calibration dictionary.
        grating (str): e.g., "MEG"
        ID_mode (int): e.g., 0
        energy_eV (float): photon energy in eV

    Returns:
        list: Coefficient list for the nearest breakpoint â‰¥ energy_eV
    """
    breakpointdict = entry[grating][ID_mode]
    breakpoint_list = list(breakpointdict.keys())
    sorted_breakpoints = np.sort(np.array(breakpoint_list))

    for bp in sorted_breakpoints:
        if energy_eV < bp:
            return breakpointdict[bp]

    return breakpointdict[sorted_breakpoints[-1]]


def main():
    cal = testCal()

    # Example usage
    test_entry = {
        "MEG": {
            0: [
                [2000, [1.0, 0.5]],
                [3000, [2.0, 1.0]]
            ]
        }
    }

    # Write a test entry
    cal.write(test_entry, comment="Test Calibration Entry", debug=True)

    # Read the entry back
    read_entry = cal.read("Dict_IDCal.txt", comment="Test Calibration Entry", debug=True)

    # Parse coefficients at a specific energy
    coeffs = parse_entry(read_entry, "MEG", 0, 2500)
    print("Interpolated Coefficients:", coeffs)


if __name__ == "__main__":
    main()
